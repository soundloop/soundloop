{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop-cavs/src/components/LeftNav/CreateMenu/SoundLibrary.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport OctaveSlider from \"./SoundLibrary/OctaveSlider\";\nimport DurationSelector from \"./SoundLibrary/DurationSelector\";\nimport styles from \"../LeftNav.module.css\";\nimport NoteButton from \"./SoundLibrary/NoteButton\";\nimport { red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange } from \"@material-ui/core/colors/\"; //Colors of each note are imported from MaterialUI colors\n//For example, colorHues[0] = red, which is a dictionary of red color hex values.\n//The dictionary has keys 100,200,300 .. 900.\n//100 would be a light red, 900 a dark red.\n//https://material-ui.com/customization/color/\n//import 12 color dicts to map to each note\n\nconst colorHues = [red, pink, purple, indigo, blue, cyan, teal, green, yellow, amber, orange, deepOrange]; //create a list lookup to find text color values to contrast the note's color.\n//arranged by octave: 1 - 7 with 0 placeholder\n\nconst textLookup = [0, 600, 800, 800, 800, 200, 100, 50];\n\nclass SoundLibrary extends React.Component {\n  constructor(props) {\n    super(props); //a list of the colors to render for one specific octave\n\n    this.buttons = []; // a list with each element being a list of colors for a specific octave\n\n    this.buttonList = []; //Chromatic Scale\n\n    this.sounds = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"]; //Octave Options\n\n    this.octaves = [1, 2, 3, 4, 5, 6, 7]; //for each octave\n\n    for (let j = 0; j < this.octaves.length; j++) {\n      //get a color for each sound and push it to a list\n      for (let i = 0; i < colorHues.length; i++) {\n        this.buttons.push({\n          color: colorHues[i][this.octaves[j] * 100],\n          sound: this.sounds[i] + this.octaves[j],\n          note: this.sounds[i],\n          textColor: colorHues[i][textLookup[this.octaves[j]]]\n        });\n      } //if j = 0, i = 1\n      // color: red[100]\n      // sound: C1 (note C in 1st octave)\n      // note: C\n      // textColor: red[600]\n\n\n      this.buttonList.push(this.buttons); //reset button list for next j loop\n\n      this.buttons = [];\n    } //on initial load, let octave be 4\n    //store these colors to change on octave selection.\n\n\n    this.state = {\n      octave: 4,\n      tones: this.buttonList,\n      noteSelected: false\n    };\n    this.handleOctave = this.handleOctave.bind(this);\n  }\n\n  handleOctave(event, newValue) {\n    this.setState({\n      octave: newValue\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"light inl-blk\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \" NOTES\"), React.createElement(\"ul\", {\n      className: styles.LibListStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.tones[this.state.octave - 1].map(item => React.createElement(\"li\", {\n      className: styles.LibListItemStyle,\n      key: item.color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(NoteButton, {\n      color: item.color,\n      sound: item.sound,\n      note: item.note,\n      textColor: item.textColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(OctaveSlider, {\n      changeFunction: this.handleOctave,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.createElement(DurationSelector, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    name: state.shared.fileName,\n    tempo: state.shared.tempo,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(SoundLibrary);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop-cavs/src/components/LeftNav/CreateMenu/SoundLibrary.js"],"names":["React","connect","OctaveSlider","DurationSelector","styles","NoteButton","red","pink","purple","indigo","blue","cyan","teal","green","yellow","amber","orange","deepOrange","colorHues","textLookup","SoundLibrary","Component","constructor","props","buttons","buttonList","sounds","octaves","j","length","i","push","color","sound","note","textColor","state","octave","tones","noteSelected","handleOctave","bind","event","newValue","setState","render","LibListStyle","map","item","LibListItemStyle","mapStateToProps","name","shared","fileName","tempo","playing"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport OctaveSlider from \"./SoundLibrary/OctaveSlider\";\nimport DurationSelector from \"./SoundLibrary/DurationSelector\";\nimport styles from \"../LeftNav.module.css\";\nimport NoteButton from \"./SoundLibrary/NoteButton\";\nimport {\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n} from \"@material-ui/core/colors/\";\n\n//Colors of each note are imported from MaterialUI colors\n//For example, colorHues[0] = red, which is a dictionary of red color hex values.\n//The dictionary has keys 100,200,300 .. 900.\n//100 would be a light red, 900 a dark red.\n//https://material-ui.com/customization/color/\n\n//import 12 color dicts to map to each note\nconst colorHues = [\n  red,\n  pink,\n  purple,\n  indigo,\n  blue,\n  cyan,\n  teal,\n  green,\n  yellow,\n  amber,\n  orange,\n  deepOrange\n];\n\n//create a list lookup to find text color values to contrast the note's color.\n//arranged by octave: 1 - 7 with 0 placeholder\nconst textLookup = [0, 600, 800, 800, 800, 200, 100, 50];\n\nclass SoundLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n    //a list of the colors to render for one specific octave\n    this.buttons = [];\n\n    // a list with each element being a list of colors for a specific octave\n    this.buttonList = [];\n\n    //Chromatic Scale\n    this.sounds = [\n      \"C\",\n      \"C#\",\n      \"D\",\n      \"D#\",\n      \"E\",\n      \"F\",\n      \"F#\",\n      \"G\",\n      \"G#\",\n      \"A\",\n      \"A#\",\n      \"B\"\n    ];\n    //Octave Options\n    this.octaves = [1, 2, 3, 4, 5, 6, 7];\n\n    //for each octave\n    for (let j = 0; j < this.octaves.length; j++) {\n      //get a color for each sound and push it to a list\n      for (let i = 0; i < colorHues.length; i++) {\n        this.buttons.push({\n          color: colorHues[i][this.octaves[j] * 100],\n          sound: this.sounds[i] + this.octaves[j],\n          note: this.sounds[i],\n          textColor: colorHues[i][textLookup[this.octaves[j]]]\n        });\n      }\n\n      //if j = 0, i = 1\n      // color: red[100]\n      // sound: C1 (note C in 1st octave)\n      // note: C\n      // textColor: red[600]\n\n      this.buttonList.push(this.buttons);\n\n      //reset button list for next j loop\n      this.buttons = [];\n    }\n    //on initial load, let octave be 4\n    //store these colors to change on octave selection.\n    this.state = { octave: 4, tones: this.buttonList, noteSelected: false };\n    this.handleOctave = this.handleOctave.bind(this);\n  }\n\n  handleOctave(event, newValue) {\n    this.setState({ octave: newValue });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h3 className=\"light inl-blk\"> NOTES</h3>\n        <ul className={styles.LibListStyle}>\n          {/* go through each note in list and render \n          its color and other properties to UI*/}\n          {this.state.tones[this.state.octave - 1].map(item => (\n            <li className={styles.LibListItemStyle} key={item.color}>\n              <NoteButton\n                color={item.color}\n                sound={item.sound}\n                note={item.note}\n                textColor={item.textColor}\n              />\n            </li>\n          ))}\n        </ul>\n        <br />\n        {/* slider for changing octave and color of notes */}\n        <OctaveSlider changeFunction={this.handleOctave} />\n        <DurationSelector />\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    name: state.shared.fileName,\n    tempo: state.shared.tempo,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(SoundLibrary);\n"]},"metadata":{},"sourceType":"module"}