{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop-cavs/src/components/LeftNav/CreateMenu/ToggleMode.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport { toggleMode, trashAllLinear, trashAllAngular } from \"../../../actions/shared\";\n\nclass ToggleMode extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = (event, newVal) => {\n      if (newVal !== null && !this.props.playing) {\n        if (newVal !== this.props.mode) {\n          if (newVal === \"angular\") {\n            this.props.dispatch(toggleMode(newVal));\n            this.props.dispatch(trashAllAngular());\n          } else {\n            this.props.dispatch(toggleMode(newVal));\n            this.props.dispatch(trashAllLinear());\n          }\n        }\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }), React.createElement(ToggleButtonGroup, {\n      value: this.props.mode,\n      exclusive: true,\n      onChange: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(ToggleButton, {\n      value: \"linear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Linear\"), React.createElement(ToggleButton, {\n      value: \"angular\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Angular\")), React.createElement(\"h3\", {\n      className: \"light inl-blk desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Switching modes will reset your SoundLoop!\", \" \"));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    mode: state.shared.mode,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToggleMode);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop-cavs/src/components/LeftNav/CreateMenu/ToggleMode.js"],"names":["React","connect","ToggleButton","ToggleButtonGroup","toggleMode","trashAllLinear","trashAllAngular","ToggleMode","Component","handleClick","event","newVal","props","playing","mode","dispatch","render","mapStateToProps","state","shared"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,SACEC,UADF,EAEEC,cAFF,EAGEC,eAHF,QAIO,yBAJP;;AAMA,MAAMC,UAAN,SAAyBP,KAAK,CAACQ,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAEvCC,WAFuC,GAEzB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAIA,MAAM,KAAK,IAAX,IAAmB,CAAC,KAAKC,KAAL,CAAWC,OAAnC,EAA4C;AAC1C,YAAIF,MAAM,KAAK,KAAKC,KAAL,CAAWE,IAA1B,EAAgC;AAC9B,cAAIH,MAAM,KAAK,SAAf,EAA0B;AACxB,iBAAKC,KAAL,CAAWG,QAAX,CAAoBX,UAAU,CAACO,MAAD,CAA9B;AACA,iBAAKC,KAAL,CAAWG,QAAX,CAAoBT,eAAe,EAAnC;AACD,WAHD,MAGO;AACL,iBAAKM,KAAL,CAAWG,QAAX,CAAoBX,UAAU,CAACO,MAAD,CAA9B;AACA,iBAAKC,KAAL,CAAWG,QAAX,CAAoBV,cAAc,EAAlC;AACD;AACF;AACF;AACF,KAdsC;AAAA;;AAevCW,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,iBAAD;AACE,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWE,IADpB;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,QAAQ,EAAE,KAAKL,WAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKE,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,EAME,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CAFF,EAUE;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAC6C,GAD7C,CAVF,CADF;AAgBD;;AAhCsC;;AAmCzC,SAASQ,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLJ,IAAAA,IAAI,EAAEI,KAAK,CAACC,MAAN,CAAaL,IADd;AAELD,IAAAA,OAAO,EAAEK,KAAK,CAACC,MAAN,CAAaN;AAFjB,GAAP;AAID;;AAED,eAAeZ,OAAO,CAACgB,eAAD,CAAP,CAAyBV,UAAzB,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport {\n  toggleMode,\n  trashAllLinear,\n  trashAllAngular\n} from \"../../../actions/shared\";\n\nclass ToggleMode extends React.Component {\n  //switch to Angular or Linear Mode on button click\n  handleClick = (event, newVal) => {\n    if (newVal !== null && !this.props.playing) {\n      if (newVal !== this.props.mode) {\n        if (newVal === \"angular\") {\n          this.props.dispatch(toggleMode(newVal));\n          this.props.dispatch(trashAllAngular());\n        } else {\n          this.props.dispatch(toggleMode(newVal));\n          this.props.dispatch(trashAllLinear());\n        }\n      }\n    }\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <br />\n        <ToggleButtonGroup\n          value={this.props.mode}\n          exclusive\n          onChange={this.handleClick}\n        >\n          <ToggleButton value=\"linear\">Linear</ToggleButton>\n          <ToggleButton value=\"angular\">Angular</ToggleButton>\n        </ToggleButtonGroup>\n        <h3 className=\"light inl-blk desc\">\n          Switching modes will reset your SoundLoop!{\" \"}\n        </h3>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    mode: state.shared.mode,\n    playing: state.shared.playing\n  };\n}\n\nexport default connect(mapStateToProps)(ToggleMode);\n"]},"metadata":{},"sourceType":"module"}