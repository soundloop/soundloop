{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/ToneKonva.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y; // angular speed measured in degrees/ms\n\n    this.angularSpeed = 0; // because frame.time does not reset on tempo changes, trueTime is used to keep track\n\n    this.trueTime = 0; // lastTrueTime is used at check for tempo change\n\n    this.lastTrueTime = 0; // lastTime is subtracted from frame.time to give trueTime\n\n    this.lastTime = 0;\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  } // uses radius of attachedLoop, x, y, and offset to find the angle of the ToneKonva component from center\n\n\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    var x2 = this.props.x;\n    var y1 = this.props.y + this.props.offset.y;\n    var y2 = this.props.y + radius;\n    var cos = (2 * (radius * radius) - Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) / (2 * (radius * radius)); // there are some instances where tones at at 0, 90, 180, 270 degree points on the loop\n    // gave undefined results from the acos() calculation because float values made result > 1 or < -1 by small amounts\n    // this check corrects those by setting any values > 1 to 1 and any values < -1 to 1\n\n    if (cos < -1) {\n      cos = -1;\n    } else if (cos > 1) {\n      cos = 1;\n    } // calculate angle in radians\n\n\n    var rad = Math.acos(cos); // convert to degrees\n\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    // get angularSpeed from attachedLoop\n    this.angularSpeed = this.props.loops[this.props.attachedLoop].speed; // get angle\n\n    this.angle = this.getAngle(); // using angle and angularSpeed, calculate the frame.time in milliseconds of when the tone should play\n\n    this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000; // using angularSpeed calculate the time it takes to complete a single full loop\n\n    this.timerLoop = 360 / this.angularSpeed * 1000; // create animation\n\n    this.anim = new Konva.Animation(frame => {\n      // using angularSpeed, calculate angle displacement for the current frame.timeDiff\n      var angleDiff = frame.timeDiff * this.angularSpeed / 1000; // rotate by angleDiff\n\n      this.circle.rotate(angleDiff); // trueTime\n\n      this.trueTime = frame.time - this.lastTime; // checks for when tone should play\n      // if trueTime is within 10 ms range of timerInit and sound is not null\n      // (this check is just for the initial rotation around the loop)\n\n      if (this.timerInit - 10 < this.trueTime && this.trueTime < this.timerInit + 10 && this.props.sound !== null) {\n        // dispatch playTone() to store with relevant information for cord to play sound\n        this.props.dispatch(playTone(this.props.sound, this.props.duration)); // else if trueTime % timerLoop is within 20 ms range of timerInit and sound is not null\n        // (this check is for all subsequent rotations around the loop)\n      } else if (this.trueTime % this.timerLoop < this.timerInit + 20 && this.trueTime % this.timerLoop > this.timerInit - 20 && this.props.sound !== null) {\n        // dispatch playTone() to store with relevant information for cord to play sound\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete, (when previous color != current color and current sound == null), \n    // move circle back to original position and offset, keeping rotation\n    if (prevProps.color !== this.props.color && this.props.sound === null) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({\n        x: this.props.offset.x,\n        y: this.props.offset.y\n      });\n    } // if speed of attachedLoop changes\n\n\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // do not change lastTime unless the lastTrueTime != trueTime\n      // this prevents compounding the lastTime value when changing tempo multiple times while paused\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n\n      this.angle = this.getAngle();\n      var newAngle = (this.angle + this.circle.rotation()) % 360;\n      this.angle = newAngle;\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = (360 - this.angle % 360) / this.angularSpeed * 1000;\n      this.timerLoop = 360 / this.angularSpeed * 1000;\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); // on pause, update the rotation value of the loop in the store\n\n        this.props.dispatch(updateLoop(this.props.attachedLoop, this.circle.rotation()));\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // find new offset values for snap, depending on rotation\n\n\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return {\n      x: offX2,\n      y: offY2\n    };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n\n      if (!this.props.playing) {\n        this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, this.props.radius, this.props.duration));\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      // move current tone above all of the others\n      this.circle.zIndex(this.props.tones.length); // for all tones, if sound null make them visible on drag\n\n      var radius = this.props.screenHeight / 350;\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation()); // new x and y are coord at original\n\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n    this.snap(newX, newY); // make the tones transparent on drag end\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n\n    this.props.dispatch(replaceTone(this.props.id, this.cx, this.cy, \"transparent\", \"#fff\", 1.5, this.props.offset.x, this.props.offset.y, this.props.attachedLoop, this.props.screenHeight / 50, null, loopRotation));\n  }\n\n  render() {\n    var color = \"transparent\";\n\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n\n    return React.createElement(Circle, {\n      x: this.props.x,\n      y: this.props.y,\n      fill: color,\n      stroke: this.props.stroke,\n      strokeWidth: this.props.strokeWidth,\n      radius: this.props.radius,\n      offset: this.props.offset,\n      ref: node => {\n        this.circle = node;\n      } // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n      ,\n      draggable: true,\n      onDragStart: this.handleDragStart,\n      onDragEnd: this.handleDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/ToneKonva.js"],"names":["React","Circle","Layer","connect","Konva","updateLoop","playTone","throwStatement","thisExpression","updateTone","deleteTone","replaceTone","ToneKonva","Component","constructor","props","cx","center","x","cy","y","angularSpeed","trueTime","lastTrueTime","lastTime","getAngle","bind","handleDragEnd","handleDragStart","snap","findClosestLoop","findTrueOffset","radius","loops","attachedLoop","x1","offset","x2","y1","y2","cos","Math","abs","rad","acos","deg","PI","componentDidMount","speed","angle","timerInit","timerLoop","anim","Animation","frame","angleDiff","timeDiff","circle","rotate","time","sound","dispatch","duration","getLayer","componentDidUpdate","prevProps","color","newAngle","rotation","playing","start","isRunning","stop","distToCenter","acceptableRange","loopArray","id","curr","diff","i","length","active","newdiff","index","value","findClosestInterval","a","b","loop","min","ret","tones","diffX","diffY","dist","sqrt","offX","offY","originalAngle","atan2","angleRad","offX2","sin","offY2","findTrueCoordinates","distance","loopToSnap","trueCoords","intervalId","zIndex","screenHeight","loopRotation","circX","circY","offsetX","offsetY","trueOff","newX","newY","render","stroke","strokeWidth","node","mapStateToProps","state","shared","rot","mode","tempo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Circle, Layer } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport { updateLoop } from \"../actions/loops\";\nimport { playTone } from \"../actions/cord\";\nimport { throwStatement, thisExpression } from \"@babel/types\";\nimport { updateTone, deleteTone, replaceTone } from \"../actions/tones\";\n\nclass ToneKonva extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    // angular speed measured in degrees/ms\n    this.angularSpeed = 0;\n\n    // because frame.time does not reset on tempo changes, trueTime is used to keep track\n    this.trueTime = 0;\n    // lastTrueTime is used at check for tempo change\n    this.lastTrueTime = 0;\n    // lastTime is subtracted from frame.time to give trueTime\n    this.lastTime = 0;\n\n    this.getAngle = this.getAngle.bind(this);\n    this.handleDragEnd = this.handleDragEnd.bind(this);\n    this.handleDragStart = this.handleDragStart.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.findTrueOffset = this.findTrueOffset.bind(this);\n  }\n\n  // uses radius of attachedLoop, x, y, and offset to find the angle of the ToneKonva component from center\n  getAngle() {\n    var radius = this.props.loops[this.props.attachedLoop].radius;\n    var x1 = this.props.x - this.props.offset.x;\n    var x2 = this.props.x;\n    var y1 = (this.props.y + this.props.offset.y);\n    var y2 = (this.props.y + radius);\n\n    var cos = (2 * (radius * radius) -\n    Math.abs((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))) /\n    (2 * (radius * radius))\n\n    // there are some instances where tones at at 0, 90, 180, 270 degree points on the loop\n    // gave undefined results from the acos() calculation because float values made result > 1 or < -1 by small amounts\n    // this check corrects those by setting any values > 1 to 1 and any values < -1 to 1\n    if (cos < -1){\n      cos = -1;\n    } else if (cos > 1) {\n      cos = 1;\n    }\n\n    // calculate angle in radians\n    var rad = Math.acos(cos);\n    // convert to degrees\n    var deg = rad * (180 / Math.PI);\n\n    if (this.props.offset.x > 0) {\n      return 360 - deg;\n    } else return deg;\n  }\n\n  componentDidMount() {\n    // get angularSpeed from attachedLoop\n    this.angularSpeed=this.props.loops[this.props.attachedLoop].speed\n\n    // get angle\n    this.angle = this.getAngle();\n\n    // using angle and angularSpeed, calculate the frame.time in milliseconds of when the tone should play\n    this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n    // using angularSpeed calculate the time it takes to complete a single full loop\n    this.timerLoop = (360 / this.angularSpeed) * 1000;\n\n    // create animation\n    this.anim = new Konva.Animation(frame => {\n      // using angularSpeed, calculate angle displacement for the current frame.timeDiff\n      var angleDiff = (frame.timeDiff * this.angularSpeed) / 1000;\n\n      // rotate by angleDiff\n      this.circle.rotate(angleDiff);\n\n      // trueTime\n      this.trueTime = frame.time - this.lastTime;\n\n      // checks for when tone should play\n      // if trueTime is within 10 ms range of timerInit and sound is not null\n      // (this check is just for the initial rotation around the loop)\n      if (\n        this.timerInit - 10 < this.trueTime &&\n        this.trueTime < this.timerInit + 10 &&\n        this.props.sound !== null\n      ) {\n        // dispatch playTone() to store with relevant information for cord to play sound\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      // else if trueTime % timerLoop is within 20 ms range of timerInit and sound is not null\n      // (this check is for all subsequent rotations around the loop)\n      } else if (\n        this.trueTime % this.timerLoop < this.timerInit + 20 &&\n        this.trueTime % this.timerLoop > this.timerInit - 20 &&\n        this.props.sound !== null\n      ) {\n        // dispatch playTone() to store with relevant information for cord to play sound\n        this.props.dispatch(playTone(this.props.sound, this.props.duration));\n      }\n    }, this.circle.getLayer());\n\n  }\n\n  componentDidUpdate(prevProps) {\n    // on delete, (when previous color != current color and current sound == null), \n    // move circle back to original position and offset, keeping rotation\n    if (prevProps.color !== this.props.color && this.props.sound === null) {\n      this.circle.x(this.props.x);\n      this.circle.y(this.props.y);\n      this.circle.offset({ x: this.props.offset.x, y: this.props.offset.y });\n    }\n\n    // if speed of attachedLoop changes\n    if (prevProps.loops[this.props.attachedLoop].speed !== this.props.loops[this.props.attachedLoop].speed) {\n      // do not change lastTime unless the lastTrueTime != trueTime\n      // this prevents compounding the lastTime value when changing tempo multiple times while paused\n      if (this.lastTrueTime !== this.trueTime) {\n        this.lastTime += this.trueTime;\n        this.lastTrueTime = this.trueTime;\n      }\n\n      this.angle = this.getAngle();\n      var newAngle = (this.angle + this.circle.rotation()) % 360\n      this.angle = newAngle;\n      this.angularSpeed = this.props.loops[this.props.attachedLoop].speed;\n      this.timerInit = ((360 - (this.angle % 360)) / this.angularSpeed) * 1000;\n      \n      this.timerLoop = (360 / this.angularSpeed) * 1000;\n    }\n\n    if (prevProps.playing !== this.props.playing) {\n      if (this.props.playing) {\n        this.anim.start();\n      } else {\n        this.anim.isRunning() && this.anim.stop(); \n        // on pause, update the rotation value of the loop in the store\n        this.props.dispatch(\n          updateLoop(this.props.attachedLoop, this.circle.rotation())\n        );\n      }\n    }\n  }\n\n  findClosestLoop(distToCenter) {\n    // iterate through loops array and compare radii\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (loopArray[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  findClosestInterval(a, b, loop) {\n    // finds closest tone and returns the index so that color can be changed\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      // need to compare pt + or - offset\n      // attached loop must be the same as the loopToSnap\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // find new offset values for snap, depending on rotation\n  findTrueOffset(offX, offY, angle) {\n    var originalAngle = Math.atan2(offX, offY);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    var dist = Math.sqrt(offX * offX + offY * offY);\n    const offX2 = Math.sin(newAngle) * dist;\n    const offY2 = Math.cos(newAngle) * dist;\n    return { x: offX2, y: offY2 };\n  }\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle\n    var originalAngle = Math.atan2(y1, x1);\n    var angleRad = angle * (Math.PI / 180);\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n      if (!this.props.playing) {\n        this.props.dispatch(\n          updateTone(\n            intervalId,\n            this.props.color,\n            this.props.sound,\n            this.props.radius,\n            this.props.duration\n          )\n        );\n      }\n    }\n  }\n\n  handleDragStart() {\n    if (this.props.playing === false) {\n      // move current tone above all of the others\n      this.circle.zIndex(this.props.tones.length);\n      // for all tones, if sound null make them visible on drag\n      var radius = this.props.screenHeight / 350;\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n        }\n      }\n    }\n  }\n\n  handleDragEnd() {\n    var loopRotation = this.props.loops[this.props.attachedLoop].rotation;\n    var circX = this.circle.x();\n    var circY = this.circle.y();\n    var offsetX = this.circle.offsetX();\n    var offsetY = this.circle.offsetY();\n    var trueOff = this.findTrueOffset(offsetX, offsetY, this.circle.rotation());\n\n    // new x and y are coord at original\n    var newX = circX - trueOff.x;\n    var newY = circY - trueOff.y;\n\n    this.snap(newX, newY);\n    // make the tones transparent on drag end\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n      }\n    }\n    this.props.dispatch(\n      replaceTone(\n        this.props.id,\n        this.cx,\n        this.cy,\n        \"transparent\",\n        \"#fff\",\n        1.5,\n        this.props.offset.x,\n        this.props.offset.y,\n        this.props.attachedLoop,\n        this.props.screenHeight / 50,\n        null,\n        loopRotation\n      )\n    );\n  }\n\n  render() {\n    var color = \"transparent\";\n    if (this.props.loops[this.props.attachedLoop].active === true) {\n      color = this.props.color;\n    }\n    return (\n      <Circle\n        x={this.props.x}\n        y={this.props.y}\n        fill={color}\n        stroke={this.props.stroke}\n        strokeWidth={this.props.strokeWidth}\n        radius={this.props.radius}\n        offset={this.props.offset}\n        ref={node => {\n          this.circle = node;\n        }}\n        // onClick={()=>this.props.dispatch(deleteTone(this.props.id))}\n        draggable={true}\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    playing: state.shared.playing,\n    loops: state.loops,\n    rot: state.shared.rotation,\n    tones: state.tones,\n    center: state.shared.center,\n    mode: state.shared.mode,\n    screenHeight: state.shared.screenHeight,\n    tempo: state.shared.tempo\n  };\n}\n\nexport default connect(mapStateToProps)(ToneKonva);\n"]},"metadata":{},"sourceType":"module"}