{"ast":null,"code":"import _objectSpread from \"/Users/ericduong/Documents/repos/3cavs/soundloop/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_TONE, UPDATE_TONE, REPLACE_TONE } from \"../actions/tones\";\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\n/*\nThe tones reducer updates the store for all tone-related state, including adding a new tone to the store, \nupdating the values of a tone in the store, and replacing a tone on delete\n*/\n\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    case ADD_TONE:\n      return [...state, {\n        id: nextToneId++,\n        color: action.color,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        offset: action.offset,\n        rotation: action.rotation\n      }];\n    // return new state with modified tone color, sound, and stroke with everything else same\n\n    case UPDATE_TONE:\n      var id = action.id;\n      return [...state.slice(0, id), _objectSpread({}, state[id], {\n        color: action.color,\n        sound: action.sound,\n        radius: action.radius,\n        duration: action.duration\n      }), ...state.slice(id + 1)];\n\n    case REPLACE_TONE:\n      var id = action.id;\n      return [...state.slice(0, id), {\n        id: id,\n        color: action.color,\n        stroke: action.stroke,\n        strokeWidth: action.strokeWidth,\n        attachedLoop: action.attachedLoop,\n        radius: action.radius,\n        sound: action.sound,\n        position: action.position,\n        offset: action.offset,\n        rotation: action.rotation,\n        duration: action.duration\n      }, ...state.slice(id + 1)];\n\n    case TRASH_ALL_LINEAR:\n      nextToneId = 0;\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextToneId = 0;\n      return [];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/3cavs/soundloop/src/reducers/tones.js"],"names":["ADD_TONE","UPDATE_TONE","REPLACE_TONE","TRASH_ALL_LINEAR","TRASH_ALL_ANGULAR","nextToneId","tones","state","action","type","id","color","attachedLoop","radius","sound","offset","rotation","slice","duration","stroke","strokeWidth","position"],"mappings":";AAAA,SACEA,QADF,EAEEC,WAFF,EAGEC,YAHF,QAIO,kBAJP;AAKA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,mBAApD;AAEA;;;;;AAKA,IAAIC,UAAU,GAAG,CAAjB;AACA,eAAe,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAChD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKT,QAAL;AACE,aAAO,CACL,GAAGO,KADE,EAEL;AACEG,QAAAA,EAAE,EAAEL,UAAU,EADhB;AAEEM,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAFhB;AAGEC,QAAAA,YAAY,EAAEJ,MAAM,CAACI,YAHvB;AAIEC,QAAAA,MAAM,EAAEL,MAAM,CAACK,MAJjB;AAKEC,QAAAA,KAAK,EAAEN,MAAM,CAACM,KALhB;AAMEC,QAAAA,MAAM,EAAEP,MAAM,CAACO,MANjB;AAOEC,QAAAA,QAAQ,EAAER,MAAM,CAACQ;AAPnB,OAFK,CAAP;AAaF;;AACA,SAAKf,WAAL;AACE,UAAIS,EAAE,GAAGF,MAAM,CAACE,EAAhB;AAEA,aAAO,CACL,GAAGH,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAeP,EAAf,CADE,oBAGAH,KAAK,CAACG,EAAD,CAHL;AAIHC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAJX;AAKHG,QAAAA,KAAK,EAAEN,MAAM,CAACM,KALX;AAMHD,QAAAA,MAAM,EAAEL,MAAM,CAACK,MANZ;AAOHK,QAAAA,QAAQ,EAAEV,MAAM,CAACU;AAPd,UASL,GAAGX,KAAK,CAACU,KAAN,CAAYP,EAAE,GAAG,CAAjB,CATE,CAAP;;AAYF,SAAKR,YAAL;AACE,UAAIQ,EAAE,GAAGF,MAAM,CAACE,EAAhB;AACA,aAAO,CACL,GAAGH,KAAK,CAACU,KAAN,CAAY,CAAZ,EAAeP,EAAf,CADE,EAEL;AACEA,QAAAA,EAAE,EAAEA,EADN;AAEEC,QAAAA,KAAK,EAAEH,MAAM,CAACG,KAFhB;AAGEQ,QAAAA,MAAM,EAAEX,MAAM,CAACW,MAHjB;AAIEC,QAAAA,WAAW,EAAEZ,MAAM,CAACY,WAJtB;AAKER,QAAAA,YAAY,EAAEJ,MAAM,CAACI,YALvB;AAMEC,QAAAA,MAAM,EAAEL,MAAM,CAACK,MANjB;AAOEC,QAAAA,KAAK,EAAEN,MAAM,CAACM,KAPhB;AAQEO,QAAAA,QAAQ,EAAEb,MAAM,CAACa,QARnB;AASEN,QAAAA,MAAM,EAAEP,MAAM,CAACO,MATjB;AAUEC,QAAAA,QAAQ,EAAER,MAAM,CAACQ,QAVnB;AAWEE,QAAAA,QAAQ,EAAEV,MAAM,CAACU;AAXnB,OAFK,EAeL,GAAGX,KAAK,CAACU,KAAN,CAAYP,EAAE,GAAG,CAAjB,CAfE,CAAP;;AAkBF,SAAKP,gBAAL;AACEE,MAAAA,UAAU,GAAG,CAAb;AAEA,aAAO,EAAP;;AAEF,SAAKD,iBAAL;AACEC,MAAAA,UAAU,GAAG,CAAb;AAEA,aAAO,EAAP;;AAEF;AACE,aAAOE,KAAP;AA/DJ;AAiED","sourcesContent":["import {\n  ADD_TONE,\n  UPDATE_TONE,\n  REPLACE_TONE\n} from \"../actions/tones\";\nimport { TRASH_ALL_LINEAR, TRASH_ALL_ANGULAR } from \"../actions/shared\";\n\n/*\nThe tones reducer updates the store for all tone-related state, including adding a new tone to the store, \nupdating the values of a tone in the store, and replacing a tone on delete\n*/\n\nlet nextToneId = 0;\nexport default function tones(state = [], action) {\n  switch (action.type) {\n    \n    case ADD_TONE:\n      return [\n        ...state,\n        {\n          id: nextToneId++,\n          color: action.color,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          offset: action.offset,\n          rotation: action.rotation\n        }\n      ];\n\n    // return new state with modified tone color, sound, and stroke with everything else same\n    case UPDATE_TONE:\n      var id = action.id;\n\n      return [\n        ...state.slice(0, id),\n        {\n          ...state[id],\n          color: action.color,\n          sound: action.sound,\n          radius: action.radius,\n          duration: action.duration\n        },\n        ...state.slice(id + 1)\n      ];\n\n    case REPLACE_TONE:\n      var id = action.id;\n      return [\n        ...state.slice(0, id),\n        {\n          id: id,\n          color: action.color,\n          stroke: action.stroke,\n          strokeWidth: action.strokeWidth,\n          attachedLoop: action.attachedLoop,\n          radius: action.radius,\n          sound: action.sound,\n          position: action.position,\n          offset: action.offset,\n          rotation: action.rotation,\n          duration: action.duration\n        },\n        ...state.slice(id + 1)\n      ];\n\n    case TRASH_ALL_LINEAR:\n      nextToneId = 0;\n\n      return [];\n\n    case TRASH_ALL_ANGULAR:\n      nextToneId = 0;\n\n      return [];\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}