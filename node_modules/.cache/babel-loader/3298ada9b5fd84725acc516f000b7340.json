{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n/*\nCORD - The cord is the line from the center of the loop to the top of the window that plays sounds on tone hits\n\nThe Cord class contains a melodyPlayer, a PolySynth from tone.js that plays sounds on triggerAttackRelease()\nIt also contains a Konva Tween animation that animates between two states: \n  1. The inactive state. The cord is straight at a 90 degree angle\n  2. The active state on tone hits. The cord is \"plucked\" in the direction of tone rotation\n*/\n\nclass Cord extends React.Component {\n  constructor(props) {\n    super(props); // initialize values for the cord drawing\n    // this.max is the highest point of the cord on the page\n\n    this.pts = [];\n    this.max = this.props.height / 2 - 75;\n    this.numIntervals = 2;\n    this.interval = this.max / this.numIntervals;\n    this.flux = 8;\n  }\n\n  componentDidMount() {\n    // melodyPlayer construction and settings\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth).set({\n      volume: 0,\n      oscillator: {\n        type: \"triangle\"\n      },\n      envelope: {\n        attack: 0.01,\n        decay: 0.1,\n        sustain: 0.2,\n        release: 1.7\n      }\n    }).toMaster();\n    this.melodyPlayer.stealVoices = false;\n    var x = this.props.center.x;\n    var y = this.props.center.y; // for loop that adds point coordinates to this.pts, which is used in this.tween for the animation\n    // originally, the cord had more than one point where x changed, which is why the for loop, this.flux, and this.numIntervals exists\n    // to add more granularity to the cord animation (ex. \"pluck\" at specific y coordinate of tone or add more oscillation), increase numIntervals\n\n    for (var i = 0; i < this.numIntervals + 1; i++) {\n      this.pts.push(x);\n      this.pts.push(y);\n      x = x + this.flux;\n      y = y - this.interval;\n      this.flux = -this.flux;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if window height changes, then recalculate the set of points for this.tween\n    if (prevProps.height !== this.props.height) {\n      // reset pts to empty array\n      this.pts = []; // recalculate max and interval based on current window height\n\n      this.max = this.props.height / 2 - 75;\n      this.interval = this.max / this.numIntervals; // reset this.x and this.y to center\n\n      var x = this.props.center.x;\n      var y = this.props.center.y; // add new point coordinates to this.pts\n\n      for (var i = 0; i < this.numIntervals + 1; i++) {\n        this.pts.push(x);\n        this.pts.push(y);\n        x = x + this.flux;\n        y = y - this.interval;\n        this.flux = -this.flux;\n      }\n    } // on play, create the Tween animation\n\n\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        onFinish: function () {\n          this.tween.reverse();\n        }\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    } // if this.props.sounds from state.shared is not empty and has changed\n\n\n    if (this.props.sounds.length > 0 && prevProps.sounds !== this.props.sounds) {\n      // if not muted\n      if (!this.props.muted) {\n        // play sound from index\n        console.log(\"SOUND: \" + this.props.sounds[this.props.index].sound);\n        this.melodyPlayer.triggerAttackRelease(this.props.sounds[this.props.index].sound, this.props.sounds[this.props.index].duration, undefined, (Math.random() * 0.5 + 0.5) * 0.8);\n      } // play Tween animation\n\n\n      if (this.props.playing) {\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    // create points for inactive cord\n    // unlike active cord, this cord has fixed x coordinates\n    var inactivePts = [];\n    this.max = this.props.height / 2 - 75;\n    this.interval = this.max / this.numIntervals;\n    var x = this.props.center.x;\n    var y = this.props.center.y;\n\n    for (var i = 0; i < this.numIntervals + 1; i++) {\n      inactivePts.push(x);\n      inactivePts.push(y);\n      y = y - this.interval;\n    }\n\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Line, {\n      points: inactivePts,\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - this.max,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/Cord.js"],"names":["React","Line","Layer","Circle","connect","Konva","Tone","Cord","Component","constructor","props","pts","max","height","numIntervals","interval","flux","componentDidMount","melodyPlayer","PolySynth","SimpleSynth","set","volume","oscillator","type","envelope","attack","decay","sustain","release","toMaster","stealVoices","x","center","y","i","push","componentDidUpdate","prevProps","playing","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","onFinish","reverse","Master","value","sounds","length","muted","console","log","index","sound","triggerAttackRelease","undefined","Math","random","play","render","inactivePts","mapStateToProps","state","shared","cord","screenHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\n/*\nCORD - The cord is the line from the center of the loop to the top of the window that plays sounds on tone hits\n\nThe Cord class contains a melodyPlayer, a PolySynth from tone.js that plays sounds on triggerAttackRelease()\nIt also contains a Konva Tween animation that animates between two states: \n  1. The inactive state. The cord is straight at a 90 degree angle\n  2. The active state on tone hits. The cord is \"plucked\" in the direction of tone rotation\n*/\n\nclass Cord extends React.Component {\n  constructor(props){\n    super(props)\n    \n    // initialize values for the cord drawing\n    // this.max is the highest point of the cord on the page\n    this.pts = [];\n    \n    this.max = this.props.height / 2 - 75;\n    this.numIntervals = 2;\n    this.interval = this.max / this.numIntervals;\n    this.flux = 8;\n  }\n\n  componentDidMount() {\n    // melodyPlayer construction and settings\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth)\n      .set({\n        volume: 0,\n        oscillator: {\n          type: \"triangle\"\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.1,\n          sustain: 0.2,\n          release: 1.7\n        }\n      })\n      .toMaster();\n    this.melodyPlayer.stealVoices = false;\n    \n\n    var x = this.props.center.x;\n    var y = this.props.center.y;\n    // for loop that adds point coordinates to this.pts, which is used in this.tween for the animation\n    // originally, the cord had more than one point where x changed, which is why the for loop, this.flux, and this.numIntervals exists\n    // to add more granularity to the cord animation (ex. \"pluck\" at specific y coordinate of tone or add more oscillation), increase numIntervals\n    for (var i = 0; i < this.numIntervals + 1; i++) {\n      this.pts.push(x);\n      this.pts.push(y);\n      x = x + this.flux;\n      y = y - this.interval;\n      this.flux = -this.flux;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // if window height changes, then recalculate the set of points for this.tween\n    if (prevProps.height !== this.props.height){\n      // reset pts to empty array\n      this.pts = [];\n      // recalculate max and interval based on current window height\n      this.max = this.props.height / 2 - 75;\n      this.interval = this.max / this.numIntervals;\n      // reset this.x and this.y to center\n      var x = this.props.center.x;\n      var y = this.props.center.y;\n      // add new point coordinates to this.pts\n      for (var i = 0; i < this.numIntervals + 1; i++) {\n        this.pts.push(x);\n        this.pts.push(y);\n        x = x + this.flux;\n        y = y - this.interval;\n        this.flux = -this.flux;\n      }\n    }\n\n    // on play, create the Tween animation\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        onFinish: function() {\n          this.tween.reverse();\n        }\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n\n    // if this.props.sounds from state.shared is not empty and has changed\n    if (\n      this.props.sounds.length > 0 &&\n      prevProps.sounds !== this.props.sounds\n    ) {\n      // if not muted\n      if (!this.props.muted) {\n        // play sound from index\n        console.log (\"SOUND: \" + this.props.sounds[this.props.index].sound)\n        this.melodyPlayer.triggerAttackRelease(\n          this.props.sounds[this.props.index].sound,\n          this.props.sounds[this.props.index].duration,\n          undefined,\n          (Math.random() * 0.5 + 0.5) * 0.8\n        );\n      }\n      \n      // play Tween animation\n      if (this.props.playing) {\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    // create points for inactive cord\n    // unlike active cord, this cord has fixed x coordinates\n    var inactivePts = [];\n    this.max = this.props.height / 2 - 75;\n    this.interval = this.max / this.numIntervals;\n    var x = this.props.center.x;\n    var y = this.props.center.y;\n    for (var i = 0; i < this.numIntervals + 1; i++) {\n      inactivePts.push(x);\n      inactivePts.push(y);\n      y = y - this.interval;\n    }\n\n    return (\n      <Layer>\n        <Line\n          points={inactivePts}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - this.max}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}