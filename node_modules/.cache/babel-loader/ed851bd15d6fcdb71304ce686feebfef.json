{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n/*\nCORD - The cord is the line from the center of the loop to the top of the window that plays sounds on tone hits\n\nThe Cord class contains a melodyPlayer, a PolySynth from tone.js that plays sounds on triggerAttackRelease()\nIt also contains a Konva Tween animation that animates between two states: \n  1. The inactive state. The cord is straight at a 90 degree angle\n  2. The active state on tone hits. The cord is \"plucked\" in the direction of tone rotation\n*/\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    // melodyPlayer construction and settings\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth).set({\n      volume: 0,\n      oscillator: {\n        type: \"triangle\"\n      },\n      envelope: {\n        attack: 0.01,\n        decay: 0.1,\n        sustain: 0.2,\n        release: 1.7\n      }\n    }).toMaster();\n    this.melodyPlayer.stealVoices = false; // initialize values for the cord drawing\n    // this.max is the highest point of the cord on the page\n\n    this.max = this.props.height / 2 - 75;\n    this.interval = max / 2;\n    this.pts = [];\n    this.flux = 8;\n    var x = this.props.center.x;\n    var y = this.props.center.y; // for loop that adds point coordinates to this.pts\n\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(x);\n      this.pts.push(y);\n      x = x + flux;\n      y = y - interval;\n      flux = -flux;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.height !== this.props.height) {\n      this.pts = [];\n      var flux = 8;\n      var prevX = this.props.center.x;\n      var prevY = this.props.center.y;\n\n      for (var i = 0; i < 3; i++) {\n        this.pts.push(prevX);\n        this.pts.push(prevY);\n        prevX = prevX + flux;\n        prevY = prevY - this.interval;\n        flux = -flux;\n      }\n    }\n\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        onFinish: function () {\n          this.tween.reverse();\n        }\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n\n    if (this.props.sounds.length > 0 && prevProps.sounds !== this.props.sounds) {\n      if (!this.props.muted) {\n        this.melodyPlayer.triggerAttackRelease(this.props.sounds[this.props.index].sound, this.props.sounds[this.props.index].duration, undefined, (Math.random() * 0.5 + 0.5) * 0.8);\n      }\n\n      if (this.props.playing) {\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    this.pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - this.interval;\n    }\n\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Line, {\n      points: pts,\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - this.max,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/Cord.js"],"names":["React","Line","Layer","Circle","connect","Konva","Tone","Cord","Component","componentDidMount","melodyPlayer","PolySynth","SimpleSynth","set","volume","oscillator","type","envelope","attack","decay","sustain","release","toMaster","stealVoices","max","props","height","interval","pts","flux","x","center","y","i","push","componentDidUpdate","prevProps","prevX","prevY","playing","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","onFinish","reverse","Master","value","sounds","length","muted","triggerAttackRelease","index","sound","undefined","Math","random","play","render","mapStateToProps","state","shared","cord","color","screenHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\n/*\nCORD - The cord is the line from the center of the loop to the top of the window that plays sounds on tone hits\n\nThe Cord class contains a melodyPlayer, a PolySynth from tone.js that plays sounds on triggerAttackRelease()\nIt also contains a Konva Tween animation that animates between two states: \n  1. The inactive state. The cord is straight at a 90 degree angle\n  2. The active state on tone hits. The cord is \"plucked\" in the direction of tone rotation\n*/\n\nclass Cord extends React.Component {\n  componentDidMount() {\n\n    // melodyPlayer construction and settings\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth)\n      .set({\n        volume: 0,\n        oscillator: {\n          type: \"triangle\"\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.1,\n          sustain: 0.2,\n          release: 1.7\n        }\n      })\n      .toMaster();\n    this.melodyPlayer.stealVoices = false;\n\n    // initialize values for the cord drawing\n    // this.max is the highest point of the cord on the page\n    this.max = this.props.height / 2 - 75;\n    this.interval = max / 2;\n    this.pts = [];\n    this.flux = 8;\n    var x = this.props.center.x;\n    var y = this.props.center.y;\n    // for loop that adds point coordinates to this.pts\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(x);\n      this.pts.push(y);\n      x = x + flux;\n      y = y - interval;\n      flux = -flux;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.height !== this.props.height){\n      this.pts = [];\n      var flux = 8;\n      var prevX = this.props.center.x;\n      var prevY = this.props.center.y;\n      for (var i = 0; i < 3; i++) {\n        this.pts.push(prevX);\n        this.pts.push(prevY);\n        prevX = prevX + flux;\n        prevY = prevY - this.interval;\n        flux = -flux;\n      }\n    }\n\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        onFinish: function() {\n          this.tween.reverse();\n        }\n      });\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n\n    if (\n      this.props.sounds.length > 0 &&\n      prevProps.sounds !== this.props.sounds\n    ) {\n      if (!this.props.muted) {\n        this.melodyPlayer.triggerAttackRelease(\n          this.props.sounds[this.props.index].sound,\n          this.props.sounds[this.props.index].duration,\n          undefined,\n          (Math.random() * 0.5 + 0.5) * 0.8\n        );\n      }\n\n      if (this.props.playing) {\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    this.pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - this.interval;\n    }\n    return (\n      <Layer>\n        <Line\n          points={pts}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - this.max}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}