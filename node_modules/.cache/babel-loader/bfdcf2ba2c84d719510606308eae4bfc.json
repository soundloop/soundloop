{"ast":null,"code":"var _jsxFileName = \"/Users/garrett/repos/soundloop-cavs/src/components/Cord.js\";\nimport React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth).set({\n      volume: 0,\n      oscillator: {\n        type: \"triangle\" // 'partials' : [16, 8, 4, 2, 1, 0.5, 1, 2]\n\n      },\n      envelope: {\n        attack: 0.01,\n        decay: 0.1,\n        sustain: 0.2,\n        release: 1.7\n      }\n    }).toMaster();\n    this.melodyPlayer.stealVoices = false;\n    var max = this.props.height / 2 - 75;\n    var interval = max / 2;\n    this.pts = [];\n    var flux = 8;\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(prevX);\n      this.pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    } //var tl = new TimelineLite();\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        //stroke: this.line.fill(),\n        onFinish: function () {\n          this.tween.reverse();\n        } // onReset: function() {\n        //   this.line.stroke(\"#692D55\");\n        // }\n\n      });\n    } else {\n      if (prevProps.playing !== this.props.playing) {}\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n\n    if (this.props.sounds.length > 0 && prevProps.sounds !== this.props.sounds) {\n      if (!this.props.muted) {\n        console.log(\"all sound: \" + JSON.stringify(this.props.sounds));\n        console.log(\"index\" + this.props.index);\n        console.log(\"specific sound: \" + JSON.stringify(this.props.sounds[this.props.index]));\n        this.melodyPlayer.triggerAttackRelease(this.props.sounds[this.props.index].sound, this.props.sounds[this.props.index].duration, undefined, (Math.random() * 0.5 + 0.5) * 0.8);\n      }\n\n      if (this.props.playing) {\n        // this.line.fill(this.props.color);\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    var cordLength = this.props.height / 2 - 75;\n    var max = this.props.height / 2 - 75;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n\n    return React.createElement(Layer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Line, {\n      points: pts,\n      stroke: \"#692D55\",\n      strokeWidth: 2,\n      tension: 0.5,\n      ref: node => {\n        this.line = node;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y - cordLength,\n      radius: 4,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Circle, {\n      x: this.props.center.x,\n      y: this.props.center.y,\n      radius: 11,\n      fill: \"#692D55\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);","map":{"version":3,"sources":["/Users/garrett/repos/soundloop-cavs/src/components/Cord.js"],"names":["React","Line","Layer","Circle","connect","Konva","Tone","Cord","Component","componentDidMount","melodyPlayer","PolySynth","SimpleSynth","set","volume","oscillator","type","envelope","attack","decay","sustain","release","toMaster","stealVoices","max","props","height","interval","pts","flux","prevX","center","x","prevY","y","i","push","componentDidUpdate","prevProps","playing","tween","Tween","node","line","duration","easing","Easings","EaseOut","points","onFinish","reverse","Master","value","sounds","length","muted","console","log","JSON","stringify","index","triggerAttackRelease","sound","undefined","Math","random","play","render","cordLength","mapStateToProps","state","shared","cord","color","screenHeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../styles/index.css\";\nimport { Line, Layer, Circle } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport Konva from \"konva\";\nimport Tone from \"tone\";\n\nclass Cord extends React.Component {\n  componentDidMount() {\n    this.melodyPlayer = new Tone.PolySynth(3, Tone.SimpleSynth)\n      .set({\n        volume: 0,\n        oscillator: {\n          type: \"triangle\"\n          // 'partials' : [16, 8, 4, 2, 1, 0.5, 1, 2]\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.1,\n          sustain: 0.2,\n          release: 1.7\n        }\n      })\n      .toMaster();\n\n    this.melodyPlayer.stealVoices = false;\n\n    var max = this.props.height / 2 - 75;\n    var interval = max / 2;\n    this.pts = [];\n    var flux = 8;\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      this.pts.push(prevX);\n      this.pts.push(prevY);\n      prevX = prevX + flux;\n      prevY = prevY - interval;\n      flux = -flux;\n    }\n    //var tl = new TimelineLite();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.playing) {\n      this.tween = new Konva.Tween({\n        node: this.line,\n        duration: 0.1,\n        easing: Konva.Easings.EaseOut,\n        points: this.pts,\n        //stroke: this.line.fill(),\n        onFinish: function() {\n          this.tween.reverse();\n        }\n        // onReset: function() {\n        //   this.line.stroke(\"#692D55\");\n        // }\n      });\n    } else {\n      if (prevProps.playing !== this.props.playing) {\n      }\n    }\n\n    if (this.props.volume !== prevProps.volume) {\n      Tone.Master.volume.value = this.props.volume;\n    }\n    if (\n      this.props.sounds.length > 0 &&\n      prevProps.sounds !== this.props.sounds\n    ) {\n      if (!this.props.muted) {\n        console.log(\"all sound: \" + JSON.stringify(this.props.sounds));\n        console.log(\"index\" + this.props.index);\n        console.log(\n          \"specific sound: \" +\n            JSON.stringify(this.props.sounds[this.props.index])\n        );\n        this.melodyPlayer.triggerAttackRelease(\n          this.props.sounds[this.props.index].sound,\n          this.props.sounds[this.props.index].duration,\n          undefined,\n          (Math.random() * 0.5 + 0.5) * 0.8\n        );\n      }\n\n      if (this.props.playing) {\n        // this.line.fill(this.props.color);\n\n        this.tween.play();\n      }\n    }\n  }\n\n  render() {\n    var cordLength = this.props.height / 2 - 75;\n    var max = this.props.height / 2 - 75;\n    var interval = max / 2;\n    var pts = [];\n    var prevX = this.props.center.x;\n    var prevY = this.props.center.y;\n    for (var i = 0; i < 3; i++) {\n      pts.push(prevX);\n      pts.push(prevY);\n      prevY = prevY - interval;\n    }\n    return (\n      <Layer>\n        <Line\n          points={pts}\n          stroke=\"#692D55\"\n          strokeWidth={2}\n          tension={0.5}\n          ref={node => {\n            this.line = node;\n          }}\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y - cordLength}\n          radius={4}\n          fill=\"#692D55\"\n        />\n        <Circle\n          x={this.props.center.x}\n          y={this.props.center.y}\n          radius={11}\n          fill=\"#692D55\"\n        />\n      </Layer>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    center: state.shared.center,\n    playing: state.shared.playing,\n    muted: state.shared.muted,\n    sounds: state.cord.sounds,\n    color: state.cord.color,\n    index: state.cord.index,\n    height: state.shared.screenHeight,\n    volume: state.shared.volume\n  };\n}\n\nexport default connect(mapStateToProps)(Cord);\n"]},"metadata":{},"sourceType":"module"}