{"ast":null,"code":"var _jsxFileName = \"/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/LeftNav/CreateMenu/SoundLibrary/NoteButton.js\";\nimport React from \"react\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../../../../actions/tones\";\nimport { playTone } from \"../../../../actions/cord\";\n/*\nNoteButton - A button that contains all of the infomation needed to update ToneKonva components\n\nThe NoteButton class consists of a draggable button that updates nearby ToneKonva components on drag end\n*/\n\nclass NoteButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  } // iterate through loops array and compare radii to find the closest loop\n\n\n  findClosestLoop(distToCenter) {\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return {\n        index: id,\n        value: curr\n      };\n    } else {\n      return null;\n    }\n  } // finds closest tone and returns the index in the tones list\n\n\n  findClosestTone(a, b, loop) {\n    var min = 100;\n    var ret = 0;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n\n    return ret;\n  } // convert current cursor location to coordinates\n\n\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1); // original angle in radians\n\n    var angleRad = angle * (Math.PI / 180); // new angle\n\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return {\n      x: x2,\n      y: y2\n    };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n      var intervalId = this.findClosestInterval(trueCoords.x, trueCoords.y, loopToSnap.index);\n      this.props.dispatch(updateTone(intervalId, this.props.color, this.props.sound, //  this.props.screenHeight / 50,\n      this.props.toneSizes[this.props.selectedSustain], this.props.selectedSustain));\n    }\n  }\n\n  handleStop() {\n    if (this.props.playing === false) {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n      this.snap(x, y); // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (this.props.tones[i].sound === null && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n          this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(playTone(this.props.sound, this.props.selectedSustain));\n    }\n  }\n\n  handleDrag() {\n    var radius = this.props.screenHeight / 350;\n\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].sound === null && !this.props.playing && this.props.loops[this.props.tones[i].attachedLoop].active === true) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"hover-shadow\",\n      style: {\n        borderRadius: \"100%\",\n        border: \"2px solid\",\n        borderColor: this.props.color,\n        backgroundColor: \"transparent\",\n        width: \"2rem\",\n        height: \"2rem\",\n        position: \"absolute\",\n        outline: \"none\",\n        pointerEvents: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(Draggable, {\n      position: this.state.deltaPosition,\n      onStop: this.handleStop,\n      onStart: this.handleDrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.selector,\n      className: \"hover-shadow\",\n      onClick: this.handleClick,\n      style: {\n        borderRadius: \"100%\",\n        backgroundColor: this.props.color,\n        width: \"2rem\",\n        zIndex: 1,\n        height: \"2rem\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"note-select\",\n      style: {\n        color: this.props.textColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, this.props.note))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n} //\n\n\nexport default connect(mapStateToProps)(NoteButton);","map":{"version":3,"sources":["/Users/ericduong/Documents/repos/3cavs/soundloop/src/components/LeftNav/CreateMenu/SoundLibrary/NoteButton.js"],"names":["React","Draggable","connect","updateTone","playTone","NoteButton","Component","constructor","props","selector","createRef","state","deltaPosition","x","y","snapped","cx","center","cy","handleStop","bind","snap","findClosestLoop","handleClick","handleDrag","distToCenter","acceptableRange","loopArray","loops","id","curr","radius","diff","Math","abs","i","length","active","newdiff","index","value","findClosestTone","a","b","loop","min","ret","tones","attachedLoop","offset","diffX","diffY","dist","sqrt","findTrueCoordinates","x1","y1","angle","distance","originalAngle","atan2","angleRad","PI","newAngle","x2","cos","y2","sin","loopToSnap","console","log","rotation","trueCoords","intervalId","findClosestInterval","dispatch","color","sound","toneSizes","selectedSustain","playing","rect","current","getBoundingClientRect","left","top","screenHeight","render","borderRadius","border","borderColor","backgroundColor","width","height","position","outline","pointerEvents","zIndex","textColor","note","mapStateToProps","shared"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Draggable from \"react-draggable\"; // The default\nimport { connect } from \"react-redux\";\nimport { updateTone } from \"../../../../actions/tones\";\nimport { playTone } from \"../../../../actions/cord\";\n\n/*\nNoteButton - A button that contains all of the infomation needed to update ToneKonva components\n\nThe NoteButton class consists of a draggable button that updates nearby ToneKonva components on drag end\n*/\n\nclass NoteButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.selector = React.createRef();\n    this.state = {\n      deltaPosition: {\n        x: 0,\n        y: 0\n      },\n      snapped: false\n    };\n    this.cx = this.props.center.x;\n    this.cy = this.props.center.y;\n    this.handleStop = this.handleStop.bind(this);\n    this.snap = this.snap.bind(this);\n    this.findClosestLoop = this.findClosestLoop.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleDrag = this.handleDrag.bind(this);\n  }\n\n  // iterate through loops array and compare radii to find the closest loop\n  findClosestLoop(distToCenter) {\n    var acceptableRange = 50;\n    var loopArray = this.props.loops;\n\n    var id = 0;\n    var curr = loopArray[id].radius;\n    var diff = Math.abs(distToCenter - curr);\n\n    for (var i = 0; i < loopArray.length; i++) {\n      if (this.props.loops[i].active) {\n        var newdiff = Math.abs(distToCenter - loopArray[i].radius);\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = loopArray[i].radius;\n          id = i;\n        }\n      }\n    }\n\n    if (diff < acceptableRange) {\n      return { index: id, value: curr };\n    } else {\n      return null;\n    }\n  }\n\n  // finds closest tone and returns the index in the tones list\n  findClosestTone(a, b, loop) {\n    var min = 100;\n    var ret = 0;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (this.props.tones[i].attachedLoop === loop) {\n        var x = this.cx - this.props.tones[i].offset.x;\n        var y = this.cy - this.props.tones[i].offset.y;\n        var diffX = x - a;\n        var diffY = y - b;\n        var dist = Math.sqrt(diffX * diffX + diffY * diffY);\n        if (dist < min) {\n          min = dist;\n          ret = this.props.tones[i].id;\n        }\n      }\n    }\n    return ret;\n  }\n\n  // convert current cursor location to coordinates\n  findTrueCoordinates(x1, y1, angle, distance) {\n    // current angle from center\n    var originalAngle = Math.atan2(y1, x1);\n    // original angle in radians\n    var angleRad = angle * (Math.PI / 180);\n    // new angle\n    var newAngle = originalAngle - angleRad;\n    const x2 = this.cx + Math.cos(newAngle) * distance;\n    const y2 = this.cy + Math.sin(newAngle) * distance;\n    return { x: x2, y: y2 };\n  }\n\n  snap(x1, y1) {\n    // calculate virtual location with rotation\n    // first calculate distance\n    var a = y1 - this.cy;\n    var b = x1 - this.cx;\n    var distToCenter = Math.sqrt(a * a + b * b);\n    var loopToSnap = this.findClosestLoop(distToCenter);\n\n    if (loopToSnap) {\n      console.log(\"LSNAP in TB: \" + loopToSnap.index);\n      var angle = this.props.loops[loopToSnap.index].rotation;\n      var trueCoords = this.findTrueCoordinates(b, a, angle, distToCenter);\n\n      var intervalId = this.findClosestInterval(\n        trueCoords.x,\n        trueCoords.y,\n        loopToSnap.index\n      );\n\n      this.props.dispatch(\n        updateTone(\n          intervalId,\n          this.props.color,\n          this.props.sound,\n          //  this.props.screenHeight / 50,\n          this.props.toneSizes[this.props.selectedSustain],\n          this.props.selectedSustain\n        )\n      );\n    }\n  }\n\n  handleStop() {\n    if (this.props.playing === false) {\n      this.rect = this.selector.current.getBoundingClientRect();\n      const x = this.rect.left;\n      const y = this.rect.top;\n\n      this.snap(x, y);\n\n      // this.setState({\n      //   deltaPosition: {\n      //     x: 0,\n      //     y: 0\n      //   }\n      // });\n\n      for (var i = 0; i < this.props.tones.length; i++) {\n        if (\n          this.props.tones[i].sound === null &&\n          this.props.loops[this.props.tones[i].attachedLoop].active === true\n        ) {\n          this.props.dispatch(updateTone(i, \"transparent\", null, 1.5));\n        }\n      }\n    }\n  }\n\n  handleClick() {\n    if (!this.props.playing) {\n      this.props.dispatch(\n        playTone(this.props.sound, this.props.selectedSustain)\n      );\n    }\n  }\n\n  handleDrag() {\n    var radius = this.props.screenHeight / 350;\n    for (var i = 0; i < this.props.tones.length; i++) {\n      if (\n        this.props.tones[i].sound === null &&\n        !this.props.playing &&\n        this.props.loops[this.props.tones[i].attachedLoop].active === true\n      ) {\n        this.props.dispatch(updateTone(i, \"#692D55\", null, radius));\n      }\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"hover-shadow\"\n          style={{\n            borderRadius: \"100%\",\n            border: \"2px solid\",\n            borderColor: this.props.color,\n            backgroundColor: \"transparent\",\n            width: \"2rem\",\n            height: \"2rem\",\n            position: \"absolute\",\n            outline: \"none\",\n            pointerEvents: \"none\"\n          }}\n        />\n        <Draggable\n          position={this.state.deltaPosition}\n          onStop={this.handleStop}\n          onStart={this.handleDrag}\n        >\n          <div\n            ref={this.selector}\n            className=\"hover-shadow\"\n            onClick={this.handleClick}\n            style={{\n              borderRadius: \"100%\",\n              backgroundColor: this.props.color,\n              width: \"2rem\",\n              zIndex: 1,\n              height: \"2rem\",\n\n              border: \"none\",\n              outline: \"none\"\n            }}\n          >\n            <div\n              className=\"note-select\"\n              style={{ color: this.props.textColor }}\n            >\n              {this.props.note}\n            </div>\n          </div>\n        </Draggable>\n      </React.Fragment>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    loops: state.loops,\n    tones: state.tones,\n    playing: state.shared.playing,\n    center: state.shared.center,\n    screenHeight: state.shared.screenHeight,\n    selectedSustain: state.shared.selectedSustain,\n    toneSizes: state.shared.toneSizes\n  };\n}\n\n//\n\nexport default connect(mapStateToProps)(NoteButton);\n"]},"metadata":{},"sourceType":"module"}